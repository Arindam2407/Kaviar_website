/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface MerkleTreeSubsetInterface extends utils.Interface {
  functions: {
    "FIELD_SIZE_SUBSET()": FunctionFragment;
    "ROOT_HISTORY_SIZE_SUBSET()": FunctionFragment;
    "ZERO_VALUE_SUBSET()": FunctionFragment;
    "_insertSubset(bytes32)": FunctionFragment;
    "allowlist(address)": FunctionFragment;
    "allowlistAddress(address)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "blacklistAddress(address)": FunctionFragment;
    "currentRootIndexSubset()": FunctionFragment;
    "filledSubtreesSubset(uint256)": FunctionFragment;
    "getLastRootSubset()": FunctionFragment;
    "hashLeftRightSubset(bytes32,bytes32)": FunctionFragment;
    "hasherSubset()": FunctionFragment;
    "isAllowlisted(address)": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isKnownRootSubset(bytes32)": FunctionFragment;
    "levelsSubset()": FunctionFragment;
    "nextIndexSubset()": FunctionFragment;
    "owner()": FunctionFragment;
    "rootsSubset(uint256)": FunctionFragment;
    "typeOfList()": FunctionFragment;
    "unAllowlistAddress(address)": FunctionFragment;
    "unBlacklistAddress(address)": FunctionFragment;
    "zerosSubset(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FIELD_SIZE_SUBSET"
      | "ROOT_HISTORY_SIZE_SUBSET"
      | "ZERO_VALUE_SUBSET"
      | "_insertSubset"
      | "allowlist"
      | "allowlistAddress"
      | "blacklist"
      | "blacklistAddress"
      | "currentRootIndexSubset"
      | "filledSubtreesSubset"
      | "getLastRootSubset"
      | "hashLeftRightSubset"
      | "hasherSubset"
      | "isAllowlisted"
      | "isBlacklisted"
      | "isKnownRootSubset"
      | "levelsSubset"
      | "nextIndexSubset"
      | "owner"
      | "rootsSubset"
      | "typeOfList"
      | "unAllowlistAddress"
      | "unBlacklistAddress"
      | "zerosSubset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE_SUBSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE_SUBSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE_SUBSET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_insertSubset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "allowlist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "allowlistAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndexSubset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtreesSubset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRootSubset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRightSubset",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasherSubset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAllowlisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKnownRootSubset",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "levelsSubset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextIndexSubset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rootsSubset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "typeOfList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unAllowlistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unBlacklistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "zerosSubset",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "FIELD_SIZE_SUBSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE_SUBSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_VALUE_SUBSET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_insertSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowlist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowlistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndexSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtreesSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRootSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRightSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasherSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAllowlisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRootSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "levelsSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextIndexSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rootsSubset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeOfList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unAllowlistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unBlacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zerosSubset",
    data: BytesLike
  ): Result;

  events: {
    "RootAddedSubset(uint32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RootAddedSubset"): EventFragment;
}

export interface RootAddedSubsetEventObject {
  index: number;
  hashValue: string;
}
export type RootAddedSubsetEvent = TypedEvent<
  [number, string],
  RootAddedSubsetEventObject
>;

export type RootAddedSubsetEventFilter = TypedEventFilter<RootAddedSubsetEvent>;

export interface MerkleTreeSubset extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MerkleTreeSubsetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FIELD_SIZE_SUBSET(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_HISTORY_SIZE_SUBSET(overrides?: CallOverrides): Promise<[number]>;

    ZERO_VALUE_SUBSET(overrides?: CallOverrides): Promise<[BigNumber]>;

    _insertSubset(
      _leafSubset: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowlist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    allowlistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    blacklistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentRootIndexSubset(overrides?: CallOverrides): Promise<[number]>;

    filledSubtreesSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLastRootSubset(overrides?: CallOverrides): Promise<[string]>;

    hashLeftRightSubset(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasherSubset(overrides?: CallOverrides): Promise<[string]>;

    isAllowlisted(actor: string, overrides?: CallOverrides): Promise<[boolean]>;

    isBlacklisted(actor: string, overrides?: CallOverrides): Promise<[boolean]>;

    isKnownRootSubset(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    levelsSubset(overrides?: CallOverrides): Promise<[number]>;

    nextIndexSubset(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rootsSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    typeOfList(overrides?: CallOverrides): Promise<[boolean]>;

    unAllowlistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unBlacklistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    zerosSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  FIELD_SIZE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_HISTORY_SIZE_SUBSET(overrides?: CallOverrides): Promise<number>;

  ZERO_VALUE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

  _insertSubset(
    _leafSubset: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowlist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  allowlistAddress(
    goodActor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  blacklistAddress(
    badActor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentRootIndexSubset(overrides?: CallOverrides): Promise<number>;

  filledSubtreesSubset(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLastRootSubset(overrides?: CallOverrides): Promise<string>;

  hashLeftRightSubset(
    _left: BytesLike,
    _right: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hasherSubset(overrides?: CallOverrides): Promise<string>;

  isAllowlisted(actor: string, overrides?: CallOverrides): Promise<boolean>;

  isBlacklisted(actor: string, overrides?: CallOverrides): Promise<boolean>;

  isKnownRootSubset(
    _root: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levelsSubset(overrides?: CallOverrides): Promise<number>;

  nextIndexSubset(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  rootsSubset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  typeOfList(overrides?: CallOverrides): Promise<boolean>;

  unAllowlistAddress(
    badActor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unBlacklistAddress(
    goodActor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  zerosSubset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FIELD_SIZE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE_SUBSET(overrides?: CallOverrides): Promise<number>;

    ZERO_VALUE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

    _insertSubset(
      _leafSubset: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string[]] & {
        index: number;
        rootSubset: string;
        pathElementsSubset: string[];
      }
    >;

    allowlist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    allowlistAddress(
      goodActor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    blacklistAddress(
      badActor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRootIndexSubset(overrides?: CallOverrides): Promise<number>;

    filledSubtreesSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLastRootSubset(overrides?: CallOverrides): Promise<string>;

    hashLeftRightSubset(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hasherSubset(overrides?: CallOverrides): Promise<string>;

    isAllowlisted(actor: string, overrides?: CallOverrides): Promise<boolean>;

    isBlacklisted(actor: string, overrides?: CallOverrides): Promise<boolean>;

    isKnownRootSubset(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelsSubset(overrides?: CallOverrides): Promise<number>;

    nextIndexSubset(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    rootsSubset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    typeOfList(overrides?: CallOverrides): Promise<boolean>;

    unAllowlistAddress(
      badActor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unBlacklistAddress(
      goodActor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    zerosSubset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "RootAddedSubset(uint32,bytes32)"(
      index?: null,
      hashValue?: null
    ): RootAddedSubsetEventFilter;
    RootAddedSubset(index?: null, hashValue?: null): RootAddedSubsetEventFilter;
  };

  estimateGas: {
    FIELD_SIZE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_HISTORY_SIZE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_VALUE_SUBSET(overrides?: CallOverrides): Promise<BigNumber>;

    _insertSubset(
      _leafSubset: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowlist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowlistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    blacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentRootIndexSubset(overrides?: CallOverrides): Promise<BigNumber>;

    filledSubtreesSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastRootSubset(overrides?: CallOverrides): Promise<BigNumber>;

    hashLeftRightSubset(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasherSubset(overrides?: CallOverrides): Promise<BigNumber>;

    isAllowlisted(actor: string, overrides?: CallOverrides): Promise<BigNumber>;

    isBlacklisted(actor: string, overrides?: CallOverrides): Promise<BigNumber>;

    isKnownRootSubset(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelsSubset(overrides?: CallOverrides): Promise<BigNumber>;

    nextIndexSubset(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rootsSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeOfList(overrides?: CallOverrides): Promise<BigNumber>;

    unAllowlistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unBlacklistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    zerosSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FIELD_SIZE_SUBSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_HISTORY_SIZE_SUBSET(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZERO_VALUE_SUBSET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _insertSubset(
      _leafSubset: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowlist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    blacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentRootIndexSubset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filledSubtreesSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastRootSubset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashLeftRightSubset(
      _left: BytesLike,
      _right: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasherSubset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAllowlisted(
      actor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBlacklisted(
      actor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isKnownRootSubset(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelsSubset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextIndexSubset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootsSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeOfList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unAllowlistAddress(
      badActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unBlacklistAddress(
      goodActor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    zerosSubset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
